#!/bin/bash
#@+leo-ver=5-thin
#@+node:jkuan.20140106102002.1899: * @file basic.n7
#@@first
set -e

# Some basic tests


source "$(dirname "$N7_SCRIPT")/setup.sh"
.init() {
    N7::local::commands::send_funcs .setup
    N7_NO_SUBSHELL=1 N7::local::commands::remote .setup
}

.test_echo_to_stdout_stderr() {
    : DESCRIPTION="This task simply echo string to stdout and stderr."
    : REMOTE=1
    echo 'Hello World!'
    echo 'Hello N7!' >&2
}
.check_echo_to_stdout_stderr() {
    : LOCAL=1
    assert_last_stdout "Hello World!"
    assert_last_stderr "Hello N7!"
}


.test_echo_no_newline() { : REMOTE=1; echo -n "look, no newline!"; }
.test_task_after_no_newline() { : REMOTE=1; echo "a line on its own."; }
.check_no_newline() { : LOCAL=1
    assert_last_stdout "a line on its own."
}


.test_task_ordering_a() { : REMOTE=1; echo A > /tmp/task.order; }
.test_task_ordering_b() { : REMOTE=1; echo B >> /tmp/task.order; }
.test_task_ordering_c() { : REMOTE=1; echo C >> /tmp/task.order; }
.check_task_ordering_a_b_c() {
    : REMOTE=1
    local out=$(echo $(</tmp/task.order))
    assert_eq_str "A B C" "$out"
}


SOME_VAR=1234
export SOME_ENV_VAR=hohoho
.test_local_task_subshell_and_vars() {
    : LOCAL=1
    : TIMEOUT=1  # this should have no effects

    N7::is_int "$N7_TASK_IDX"; assert
    [ "$N7_EHOSTS" ]; assert
    [ "$N7_HOST" = localhost ]; assert

    sleep 2 # not gonna timeout

    assert_eq_str "$SOME_VAR" 1234
    assert_eq_str "$SOME_ENV_VAR" hohoho
    SOME_VAR="not changed"
    SOME_ENV_VAR=whatever
}
.check_local_task_subshell_and_vars() {
    : LOCAL=1
    assert_eq_str "$SOME_VAR" 1234
    assert_eq_str "$SOME_ENV_VAR" hohoho
}


PID=$$
not_a_task() { : LOCAL=1
    echo "This is not a task, it won't ever be run by N7." > /tmp/not_a_task.$PID
}
.check_last_func_is_not_a_task() { : LOCAL=1
    [ ! -e /tmp/not_a_task.$PID ]; assert "/tmp/not_a_task.$PID exists!"
}


CAPTURED=
.test_capture_local_task() {
    : LOCAL=1
    : NO_SUBSHELL=1
    CAPTURED='this line should be captured'
}
.check_capture_local_task() {
    : LOCAL=1
    assert_eq_str "$CAPTURED" "this line should be captured"
}


.test_cp() {
    : LOCAL=1
    N7::local::files::cp "$0" /tmp/cp_file_$PID
    N7::local::commands::send_env TEST_CP_FNAME=/tmp/cp_file_$PID
}
.check_cp_and_file() {
    : REMOTE=1
    [ -e $TEST_CP_FNAME ]; assert "Failed copying a local file to remote hosts!"
    if [ -e $TEST_CP_FNAME ]; then
        N7::remote::files::file $TEST_CP_FNAME sudo=1 owner=root group=admin mode=600
        ls -l $TEST_CP_FNAME | grep -- "^-rw-------" | awk '{print $3, $4}' | grep 'root admin'
        assert "Failed setting file attributes"
    fi
}
    
.test_cp_with_mode() {
    : LOCAL=1
    N7::local::files::cp "$0" /tmp/cp_file_$PID sudo=1 owner=vagrant group=vagrant mode=644
    N7::local::commands::send_env TEST_CP_FNAME=/tmp/cp_file_$PID
}
.check_cp_and_file() {
    : REMOTE=1
    [ -e $TEST_CP_FNAME ]; assert "Failed copying a local file to remote hosts!"
    ls -l $TEST_CP_FNAME | grep -- "^-rw-r--r--" | awk '{print $3, $4}' | grep 'vagrant vagrant'
    assert "Failed setting file attributes"
}


.test_cp_tpl() {
    : LOCAL=1
    N7::local::files::cp_tpl <(echo hello \$PID) /tmp/cp_tpl_$PID
    N7::local::commands::send_env MY_PID=$PID
}
.check_cp_tpl() {
    : REMOTE=1
    assert_eq_str "$(</tmp/cp_tpl_$MY_PID)" "hello $MY_PID"
}


.test_n7_sub_process() {
    : LOCAL=1
    N7::local::commands::n7 'touch /tmp/nnnn'
}

#@-leo
